@page "/admin/purchase"
@inherits OwningComponentBase<ICheckoutRepository>

<PurchaseTable TableTitle="Uncollected Purchase" Checkouts="UncollectedPurchase"
               ButtonLabel="Collected" PurchaseSelected="ResetPurchase"></PurchaseTable>

<PurchaseTable TableTitle="Collected Purchase" Checkouts="CollectedPurchase"
               ButtonLabel="Reset" PurchaseSelected="CollectPurchase"></PurchaseTable>

<button class="btn btn-info" @onclick="@(x => UpdateData())">Refresh Data</button>

@code{ 
    public ICheckoutRepository repo => Service;

    public IEnumerable<Checkout> AllPurchase { get; set; }
    public IEnumerable<Checkout> UncollectedPurchase { get; set; }
    public IEnumerable<Checkout> CollectedPurchase { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        AllPurchase = await repo.Checkouts.ToListAsync();
        UncollectedPurchase = AllPurchase.Where(x => !x.PurchaseReceived);
        CollectedPurchase = AllPurchase.Where(x => x.PurchaseReceived);
    }

    public void CollectPurchase(int id) => UpdatePurchase(id, true);
    public void ResetPurchase(int id) => UpdatePurchase(id, false);

    public void UpdatePurchase(int id, bool purchased)
    {
        Checkout c = repo.Checkouts.FirstOrDefault(x => x.CheckoutId == id);
        c.PurchaseReceived = purchased;
        repo.SaveCheckout(c);
    }
}